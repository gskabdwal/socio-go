definitions:
  dto.AllFriends:
    properties:
      friend_id:
        type: string
    type: object
  dto.Friends:
    properties:
      created_at:
        type: string
      friend_id:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.FriendsCrate:
    properties:
      friend_id:
        type: string
      user_id:
        type: string
    required:
    - friend_id
    - user_id
    type: object
  dto.Post:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.PostCreate:
    properties:
      content:
        maxLength: 2000
        type: string
    required:
    - content
    type: object
  dto.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserCreate:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        type: string
      password:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /socio/friends:
    post:
      consumes:
      - application/json
      description: Create a new friendship between users
      parameters:
      - description: Friendship data
        in: body
        name: friend
        required: true
        schema:
          $ref: '#/definitions/dto.FriendsCrate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.Friends'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a friend
      tags:
      - friendships
  /socio/friends/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a friendship between two users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Friend ID to remove
        in: query
        name: f_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a friendship
      tags:
      - friendships
    get:
      consumes:
      - application/json
      description: Get all friends for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AllFriends'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user's friends
      tags:
      - friendships
  /socio/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with name and email
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /socio/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user by ID
      tags:
      - users
  /socio/users/{id}/posts:
    get:
      consumes:
      - application/json
      description: Get all posts for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Post creation data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.PostCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new post
      tags:
      - posts
  /socio/users/{id}/posts/{post_id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific post by user ID and post ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a post
      tags:
      - posts
swagger: "2.0"
